[build-system]
requires = ["setuptools>=64"]
build-backend = "setuptools.build_meta"

[project]
name = "sqlalchemy-hana"
version = "1.0.0"
description = "SQLAlchemy dialect for SAP HANA"
keywords = ["sqlalchemy", "sap", "hana"]
requires-python = "~=3.8"
readme = "README.rst"
authors = [{ name = "Christoph Heer", email = "christoph.heer@sap.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: SQL",
    "Topic :: Database",
    "Topic :: Database :: Front-Ends",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = ["sqlalchemy>=1.4.0,<3", "hdbcli~=2.10"]

[project.optional-dependencies]
dev = [
    "isort==5.12.0",
    "black==23.9.1",
    "pre-commit==3.5.0",
    "flake8==6.1.0",
    "pylint==3.0.2",
    "mypy==1.6.1",
    "types-hdbcli==2.18.0.0",
]
test = [
    "pytest==7.4.2",
    "pytest-cov==4.1.0",
    "coverage[toml]==7.3.2",
    "diff-cover[toml]==8.0.0",
]
alembic = ["alembic~=1.12"]

[project.entry-points."sqlalchemy.dialects"]
hana = "sqlalchemy_hana.dialect:HANAHDBCLIDialect"
"hana.hdbcli" = "sqlalchemy_hana.dialect:HANAHDBCLIDialect"

[project.urls]
Repository = "https://github.com/SAP/sqlalchemy-hana"
"Issue Tracker" = "https://github.com/SAP/sqlalchemy-hana/issues"
Changelog = "https://github.com/SAP/sqlalchemy-hana/blob/main/CHANGES.rst"

[project.license]
text = "Apache-2.0"

[tool.setuptools.packages.find]
include = ["sqlalchemy_hana"]

[tool.setuptools.package-data]
sqlalchemy_hana = ["py.typed"]

[tool.isort]
profile = "black"
add_imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
log_level = "DEBUG"
xfail_strict = true
filterwarnings = [
    # all warnings are errors
    "error",
]
markers = [
    # used by sqlalchemy; registered to avoid warnings
    "backend: used by sqlalchemy",
    "mypy: used by sqlalchemy",
]

[tool.diff_cover]
addopts = "--strict-markers"
include_untracked = true
fail_under = 80

[tool.pylint.master]
max-line-length = 100

[tool.pylint."messages control"]
enable = ["all"]
disable = [
    # ignore fixme comments
    "fixme",
    # allow disables
    "locally-disabled",
    "suppressed-message",
    "file-ignored",
    # allow missing docstrings
    "missing-class-docstring",
    "missing-function-docstring",
    # many false positives
    "abstract-method",
    "assignment-from-none",
    # we need them for the dialect
    "unused-argument",
    "protected-access",
    "not-callable",
    "no-member",
    # explicit is better than implicit
    "use-implicit-booleaness-not-comparison-to-zero",
    # ignore too-* checks
    "too-many-ancestors",
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-function-args",
    "too-many-lines",
]

[tool.pylint.basic]
good-names = ["visit_TINYINT", "visit_SMALLDECIMAL"]

[tool.mypy]
# formatting
pretty = true
show_column_numbers = true
show_error_codes = true
# checks
strict = true
strict_optional = true
warn_no_return = true
warn_return_any = false
# allow calls to untyped functions
disallow_untyped_calls = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
ignore_errors = true
module = ["test.*"]
